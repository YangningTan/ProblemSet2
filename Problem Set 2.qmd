---
title: "Problem Set 2"
author: "Yangning Tan"
format: html
editor: visual
---

## Problem 1 - Dice Game

a.  Write functions taking in as input the number of dice to roll each returning your total winnings or loses.

    Version 1: Implement this game using a loop over the die rolls.

    ```{r}
    play_dice_v1 <- function(n) {
      total_winnings <- 0
      for (i in 1:n) {
        roll <- sample(1:6, 1)  # Roll a 6-sided dice
        if (roll %% 2 == 0) {   # the roll is even
          total_winnings <- total_winnings + roll - 2
        } else { # the roll is odd
          total_winnings <- total_winnings - 2
        }
      }
      return(total_winnings)
    }
    ```

    Version 2: Implement this game using built-in R vectorized functions.

    ```{r}
    play_dice_v2 <- function(n) {
      rolls <- sample(1:6, n, replace = TRUE)  # Roll a 6-sided dice n times
      winnings <- sum(rolls[rolls %% 2 == 0]) - 2 * n
      return(winnings)
    }
    ```

    Version 3: Implement this by collapsing the die rolls into a single `table()`.

    ```{r}
    play_dice_v3 <- function(n) {
      rolls <- sample(1:6, n, replace = TRUE)  # Roll a 6-sided dice n times
      roll_table <- table(rolls)
      times <- as.numeric(roll_table[as.numeric(names(roll_table)) %% 2 == 0])
      names <- as.numeric(names(roll_table[as.numeric(names(roll_table)) %% 2 == 0]))
      winnings <- as.numeric(t(times) %*% (names)) - 2 * n
      return(winnings)
    }
    ```

    Version 4: Implement this game by using one of the "`apply`" functions.

    ```{r}
    play_dice_v4 <- function(n) {
      rolls <- sample(1:6, n, replace = TRUE)  # Roll a 6-sided dice n times
      winnings <- sum(sapply(rolls, function(roll) if (roll %% 2 == 0) roll - 2 else -2))
      return(winnings)
    }
    ```

b.  Demonstrate that all versions work. Do so by running each a few times, once with an input of 3, and once with an input of 3000.

    Version 1:

    ```{r}
    play_dice_v1(3)
    play_dice_v1(3000)
    ```

    Version 2:

    ```{r}
    play_dice_v2(3)
    play_dice_v2(3000)
    ```

    Version 3:

    ```{r}
    play_dice_v3(3)
    play_dice_v3(3000)
    ```

    Version 4:

    ```{r}
    play_dice_v4(3)
    play_dice_v4(3000)
    ```

    All versions work.

c.  Demonstrate that the four versions give the same result. Test with inputs 3 and 3000. (You may need to add a way to control the randomization.)

    Test with input 3.

    ```{r}
    set.seed(1) # set a seed for randomization}
    play_dice_v1(3)
    set.seed(123)
    play_dice_v2(3)
    set.seed(123)
    play_dice_v3(3)
    set.seed(123)
    play_dice_v4(3)
    ```

    Test with input 300.

    ```{r}
    set.seed(2) # set a seed for randomization}
    play_dice_v1(3000)
    set.seed(2)
    play_dice_v2(3000)
    set.seed(2)
    play_dice_v3(3000)
    set.seed(2)
    play_dice_v4(3000)
    ```

    The four versions give the same result.

d.  Use the *microbenchmark* package to clearly demonstrate the speed of the implementations. Compare performance with a low input (100) and a large input (10000). Discuss the results.

    ```{r}
    library(microbenchmark)
    ```

    We first check the result with a low input.

    ```{r}
    microbenchmark(play_dice_v1(100))
    microbenchmark(play_dice_v2(100))
    microbenchmark(play_dice_v3(100))
    microbenchmark(play_dice_v4(100))
    ```

    With a low input, the difference between each implementation seems rather small. Each of them seems to execute fast enough because the input is rather limited.

    With a large input.

    ```{r}
    microbenchmark(play_dice_v1(10000))
    microbenchmark(play_dice_v2(10000))
    microbenchmark(play_dice_v3(10000))
    microbenchmark(play_dice_v4(10000))
    ```

    However, with a large input, the difference is much more obvious. Versions that use vectorized operations (such as Version 2) and built-in functions (Version 3) are likely to be faster than the loop-based Version 1 and Version 4.

e.  Do you think this is a fair game? Defend your decision with evidence based upon a Monte Carlo simulation.

    ```{r}
    # Set the number of tials, which should be a relatively large number
    num_trials <- 1000000

    # Initialize a vector to store the results of each trial
    results <- numeric(num_trials)

    # Simulate the game for each trial
    for (i in 1:num_trials) {
      winnings <- play_dice_v2(10)  # Using Version 2 as an example
      results[i] <- winnings
    }

    # Calculate the average winnings
    average_winnings <- mean(results)

    # Check if the game is fair
    if (abs(average_winnings) < 1e-2) {
      cat("The Monte Carlo simulation suggests that the game is approximately fair.\n")
    } else {
      cat("The Monte Carlo simulation suggests that the game is not fair.\n")
    }
    ```

    Through Monte Carlo numerical experiments, the average amount players might win seems to converge to $0$. Therefore, it should be a fair game.

## Problem 2 - Linear Regression

We first import the data.

```{r}
data <- read.csv("cars.csv", header = TRUE)
```

a.  The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.

    ```{r}
    colnames(data)[1:18] <- c("height", "length", "width", "driveline", "eng_type", "hybrid", "gear_num", "tran", "mpg_city", "fuel_type", "mpg_hw", "class", "ID", "make", "model_year", "year", "hp", "torque")
    ```

b.  Restrict the data to cars whose Fuel Type is \"Gasoline\".

    ```{r}
    gasoline_cars <- subset(data, fuel_type == "Gasoline")
    ```

c.  Fit a linear regression model predicting MPG on the highway.

    ```{r}
    model <- lm(mpg_hw ~ hp + torque + height + length + width + as.factor(year), data = gasoline_cars)
    model
    ```

    The coefficient of the estimator "horsepower" is positive. This implies the higher horsepower, the higher mpg on the highway when other variables are held constant. This accords with common sense. Also, the coefficient is relatively small, which means that the estimator "horsepower" does not have a great impact on the response "mpg on the highway".

d.  Refit the model (with `lm`) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.

    We want to choose three different values of torque that are representative of what most cars have. In fact, we select the top three values of torque that are most common among cars. Also, we choose cars produced in a specific year, 2012.

    ```{r}
    library(ggplot2)
    library(dplyr)

    # Count the occurrences of each torque value and select the top three
    top_torque_values <- names(sort(table(gasoline_cars$torque), decreasing = TRUE))[1:3]

    # Filter the data to include cars with the top three torque values
    filtered_data <- gasoline_cars %>%
      filter(year == 2012, torque %in% top_torque_values)

    # Produce the new model
    model_with_interaction <- lm(mpg_hw ~ hp * torque + height + length + width, data = filtered_data)

    # Create the interaction plot
    interaction.plot(
      x.factor = filtered_data$hp, 
      trace.factor = filtered_data$torque, 
      response = predict(model_with_interaction, newdata = filtered_data),
      fun = mean, 
      xlab = "horsepower", 
      ylab = "MPG on highway"
    )
    ```

    The lines are not parallel and cross or intersect at some point, which indicates that there is an interaction effect between "horsepower" and "torque". This means that the relationship between "horsepower" and "mpg on highway" depends on the value of "torque".

e.  Calculate $\hat{\beta}$ from d. manually (without using `lm`) by first creating a proper design matrix, then using matrix algebra to estimate $\beta$. Confirm that you get the same result as `lm` did prior.

    We first create the matrix $X$ in the linear regression model.

    ```{r}
    # Create a matrix with the specified columns
    matrix_X <- matrix(1, nrow = nrow(filtered_data), ncol = 7)  # Initialize with 1's

    # Calculate the products and assign them to the respective columns
    matrix_X[, 2] <- filtered_data$hp
    matrix_X[, 3] <- filtered_data$torque
    matrix_X[, 4] <- filtered_data$height
    matrix_X[, 5] <- filtered_data$length
    matrix_X[, 6] <- filtered_data$width
    matrix_X[, 7] <- filtered_data$hp * filtered_data$torque
    ```

    Also, we need the vector of the response "mpg on highway".

    ```{r}
    y <- filtered_data$mpg_hw
    ```

    Based on the theorem of linear regression, the estimation of coefficients $\beta$ is given as follows.

    ```{r}
    coeff <- solve(t(matrix_X) %*% matrix_X) %*% t(matrix_X) %*% y
    coeff
    model_with_interaction
    ```

    The result accords with what `lm` did prior.
